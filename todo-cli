#!/usr/bin/ruby
# author: nishiki
# mail: nishiki@yaegashi.fr

require 'rubygems'
require 'optparse'
require 'pathname'
require 'locale'
require 'set'
require 'i18n'

APP_ROOT = File.dirname(Pathname.new(__FILE__).realpath)
require "#{APP_ROOT}/lib/Cli"

# --------------------------------------------------------- #
# Set local
# --------------------------------------------------------- #

lang = Locale::Tag.parse(ENV['LANG']).to_simple.to_s[0..1]

if defined?(I18n.enforce_available_locales)
	I18n.enforce_available_locales = true
end

I18n::Backend::Simple.send(:include, I18n::Backend::Fallbacks)
I18n.load_path      = Dir["#{APP_ROOT}/i18n/*.yml"]
I18n.default_locale = :en
I18n.locale         = lang.to_sym

# --------------------------------------------------------- #
# Options
# --------------------------------------------------------- #

options = {}
data    = {}

OptionParser.new do |opts|
	opts.banner = "#{I18n.t('option.usage')}: todo-cli [options]"

	opts.on('-a', '--add', I18n.t('option.add')) do
		options[:add] = true
	end

	opts.on('-s', '--show ID', I18n.t('option.show')) do |id|
		options[:show] = id
	end

	opts.on('-u', '--update ID', I18n.t('option.update')) do |id|
		options[:update] = id
	end

	opts.on('--delete ID', I18n.t('option.delete')) do |id|
		options[:delete] = id
	end

	opts.on('-n', '--name NAME', I18n.t('option.name')) do |name|
		data[:name] = name
	end

	opts.on('-g', '--group GROUP', I18n.t('option.group')) do |group|
		data[:group]    = group
		options[:group] = group
	end

	opts.on('-c', '--comment COMMENT', I18n.t('option.comment')) do |comment|
		data[:comment] = comment
	end

	opts.on('-p', '--progress NUMBER', I18n.t('option.progress')) do |progress|
		data[:progress] = progress
	end

	opts.on('-d', '--deadline DATE', I18n.t('option.deadline')) do |deadline|
		data[:deadline] = deadline
	end
end.parse!

# --------------------------------------------------------- #
# Main
# --------------------------------------------------------- #

cli = TodoCli::Cli.new

# Add a new task
# --------------------------------------------------------- #

if not options[:add].nil?
	cli.add(data)

# Show all data a taks
# --------------------------------------------------------- #

elsif not options[:show].nil?
	cli.show(options[:show])

# Update a task
# --------------------------------------------------------- #

elsif not options[:update].nil?
	cli.update(options[:update], data)

# Delete a task
# --------------------------------------------------------- #

elsif not options[:delete].nil?
	cli.delete(options[:delete])

# List all tasks
# --------------------------------------------------------- #

else
	cli.list(options)
end

exit(0)
