#!/usr/bin/ruby
# author: nishiki
# mail: nishiki@yaegashi.fr

require 'rubygems'
require 'time'
require 'optparse'
require 'pathname'
require 'locale'
require 'set'
require 'i18n'
require 'highline/import'
require 'colorize'
require 'command_line_reporter'
include CommandLineReporter

APP_ROOT = File.dirname(Pathname.new(__FILE__).realpath)
require "#{APP_ROOT}/lib/TodoCli"

# --------------------------------------------------------- #
# Set local
# --------------------------------------------------------- #

lang = Locale::Tag.parse(ENV['LANG']).to_simple.to_s[0..1]

if defined?(I18n.enforce_available_locales)
	I18n.enforce_available_locales = true
end

I18n::Backend::Simple.send(:include, I18n::Backend::Fallbacks)
I18n.load_path      = Dir["#{APP_ROOT}/i18n/*.yml"]
I18n.default_locale = :en
I18n.locale         = lang.to_sym

# --------------------------------------------------------- #
# Options
# --------------------------------------------------------- #

options = {}
data    = {}

OptionParser.new do |opts|
	opts.banner = "#{I18n.t('option.usage')}: todo-cli [options]"

	opts.on('-a', '--add', I18n.t('option.add')) do
		options[:add] = true
	end

	opts.on('-s', '--show ID', I18n.t('option.show')) do |id|
		options[:show] = id
	end

	opts.on('-u', '--update ID', I18n.t('option.update')) do |id|
		options[:update] = id
	end

	opts.on('--delete ID', I18n.t('option.delete')) do |id|
		options[:delete] = id
	end

	opts.on('-n', '--name NAME', I18n.t('option.name')) do |name|
		data[:name] = name
	end

	opts.on('-c', '--comment COMMENT', I18n.t('option.comment')) do |comment|
		data[:comment] = comment
	end

	opts.on('-d', '--deadline DATE', I18n.t('option.deadline')) do |deadline|
		data[:deadline] = deadline
	end
end.parse!

# --------------------------------------------------------- #
# Main
# --------------------------------------------------------- #

todo = TodoCli.new

if not todo.load
	puts "#{I18n.t('display.error')} #1: #{todo.error_msg}"
	exit(3)
end

# Add a new task
# --------------------------------------------------------- #

if not options[:add].nil?
	if todo.add(data)
		if todo.save
			puts I18n.t('success.add').green
		else
			puts "#{I18n.t('display.error')} #2: #{todo.error_msg}".red
		end
	else
		puts "#{I18n.t('display.error')} #3: #{todo.error_msg}".red
	end

# Show all data a taks
# --------------------------------------------------------- #

elsif not options[:show].nil?
	task = todo.show(options[:show])
	if task.empty?
		puts "#{I18n.t('diplay.error')} #4: #{todo.error_msg}".red
	else
		print "##{task['id']} ".yellow
		puts task['name']
		puts '-' * 20
		print "#{I18n.t('display.date_create')}: ".yellow
		puts task['date_create']
		print "#{I18n.t('display.date_update')}: ".yellow
		puts task['date_update']
		print "#{I18n.t('display.deadline')}: ".yellow
		puts task['deadline']
		print "#{I18n.t('display.comment')}: ".yellow
		puts task['comment']
	end

# Update a task
# --------------------------------------------------------- #

elsif not options[:update].nil?
	if todo.update(options[:update], data)
		if todo.save
			puts I18n.t('success.update', id: options[:update]).green
		else
			puts "#{I18n.t('display.error')} #6: #{todo.error_msg}".red
		end
	else
		puts "#{I18n.t('display.error')} #7: #{todo.error_msg}".red
	end

# Delete a task
# --------------------------------------------------------- #

elsif not options[:delete].nil?
	if todo.delete(options[:delete])
		if todo.save
			puts I18n.t('success.delete', id: options[:delete]).green
		else
			puts "#{I18n.t('display.error')} #8: #{todo.error_msg}".red
		end
	else
		puts "#{I18n.t('display.error')} #9: #{todo.error_msg}".red
	end

# List all tasks
# --------------------------------------------------------- #

else
	table(border: false) do
		row(header: true, color: 'yellow') do
			column('ID', align: 'left')
			column(I18n.t('display.name'), width: 30, align: 'left')
			column(I18n.t('display.deadline'), width: 30, align: 'left')
		end

		todo.list.each do |t|
			task = t[1]
		
			row do
				column(task['id'])
				column(task['name'])

				deadline = task['deadline'].to_s
				time     = Time.now

				if deadline.to_s.empty?
					column(I18n.t('display.nothing'))
				elsif Time.parse(deadline) < time
					column(task['deadline'], color: 'red')
				elsif Time.parse(deadline).to_i - time.to_i <= 3 * 24 * 60 * 60 # 3 days
					column(task['deadline'], color: 'magenta')
				else
					column(task['deadline'])
				end
			end
		end
	end
end

exit(0)
